generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role          Role        @default(USER)
  name          String?
  username      String?
  password      String?
  bio           String?
  address       String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Comment       Comment[]
  Like          Like[]
  Post          Post[]
  SavedPost     SavedPost[]
  sessions      Session[]
  Jobs          Jobs[]

  @@index([id])
  @@map("User")
}

enum Role {
  HANDICAPP
  ORG
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String?
  media_url String
  userId    String      @db.Uuid
  createdAt DateTime    @default(now()) @db.Timestamptz(6)
  comments  Comment[]
  Like      Like[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  SavedPost SavedPost[]
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId String @db.Uuid
  userId String @db.Uuid
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}

model SavedPost {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Jobs {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String   @db.Text
  description   String   @db.Text
  qualification String   @db.Text
  experience    String   @db.Text
  salary        Int      @default(0)
  location      String
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?  @db.Uuid
}
